#!/usr/bin/env python3
# Elite Bluetooth Vulnerability Scanner
# Developed by Anas Erami

import subprocess
import os
import time
import sys
import platform
import threading
from datetime import datetime
import json
import re
from colorama import Fore, Style, init

# Initialize colors
init(autoreset=True)

class BluetoothPentestTool:
    def __init__(self):
        self.devices = []
        self.vulnerable_devices = []
        self.scan_time = 15
        self.current_target = None
        self.check_dependencies()
        
    def check_dependencies(self):
        required = ["hcitool", "bluetoothctl", "sdptool", "l2ping", "gatttool"]
        missing = [tool for tool in required if not self.run_cmd(f"which {tool}")]
        
        if missing:
            print(f"{Fore.RED}[!] Missing tools: {', '.join(missing)}")
            print(f"{Fore.YELLOW}[*] Install with: sudo apt install bluez bluez-tools")
            sys.exit(1)
    
    def run_cmd(self, cmd):
        try:
            return subprocess.check_output(cmd, shell=True, text=True, stderr=subprocess.PIPE).strip()
        except:
            return ""
    
    def show_banner(self):
        banner = f"""{Fore.GREEN}
╔═╗┬ ┬┌┬┐┌─┐┌─┐┌─┐┌─┐┌─┐┬  ┬┬┌─┐┌─┐┬─┐
╠═╝│ │ │ ├─┤└─┐│  ├┤ ├─┤└┐┌┘││  ├┤ ├┬┘
╩  └─┘ ┴ ┴ ┴└─┘└─┘└  ┴ ┴ └┘ ┴└─┘└─┘┴└─
        {Style.RESET_ALL}{Fore.CYAN}Bluetooth Vulnerability Scanner v3.0{Style.RESET_ALL}
        {Fore.YELLOW}Developed by Anas Erami | {datetime.now().strftime('%Y-%m-%d')}
        """
        print(banner)
        print(f"{Fore.MAGENTA}[*] Initializing advanced Bluetooth security assessment")
        print(f"{Fore.CYAN}──────────────────────────────────────────────────{Style.RESET_ALL}")
    
    def scan_devices(self):
        print(f"{Fore.GREEN}[*] Scanning Bluetooth devices ({self.scan_time} seconds)...")
        
        # Run classic scan in background
        threading.Thread(target=self.classic_scan, daemon=True).start()
        
        # Run BLE scan
        self.ble_scan()
        
        # Animated progress bar
        for i in range(self.scan_time):
            sys.stdout.write(f"\r{Fore.YELLOW}⏳ Progress: [{'='*i}{'>'}{' '*(self.scan_time-i-1)}] {i+1}/{self.scan_time}s")
            sys.stdout.flush()
            time.sleep(1)
        
        print(f"\n{Fore.GREEN}[+] Scan completed: {len(self.devices)} devices found")
    
    def classic_scan(self):
        self.run_cmd("bluetoothctl scan on")
        time.sleep(self.scan_time)
        self.run_cmd("bluetoothctl scan off")
        output = self.run_cmd("bluetoothctl devices")
        
        for line in output.splitlines():
            if "Device" in line:
                parts = line.split()
                mac = parts[1]
                name = " ".join(parts[2:])
                self.devices.append({
                    'mac': mac, 
                    'name': name, 
                    'type': 'Classic',
                    'vendor': self.get_vendor(mac)
                })
    
    def ble_scan(self):
        output = self.run_cmd(f"timeout {self.scan_time} hcitool lescan")
        for line in output.splitlines():
            if "LE Scan" not in line and line:
                parts = line.split()
                if len(parts) >= 2:
                    mac = parts[0]
                    if not any(d['mac'] == mac for d in self.devices):
                        self.devices.append({
                            'mac': mac, 
                            'name': " ".join(parts[1:]) or "Unknown BLE", 
                            'type': 'BLE',
                            'vendor': self.get_vendor(mac)
                        })
    
    def get_vendor(self, mac):
        oui = mac[:8].upper()
        vendors = {
            "DC:85:DE": "Apple",
            "A4:C1:38": "Samsung",
            "00:18:13": "Sony",
            "9C:AD:EF": "Google",
            "0C:AE:7D": "Microsoft",
            "74:40:BB": "Xiaomi"
        }
        return vendors.get(oui, "Unknown Vendor")
    
    def show_menu(self):
        print(f"\n{Fore.CYAN}┌─────────────────[ MAIN MENU ]─────────────────┐")
        print(f"│ {Fore.YELLOW}1. Show discovered devices                    {Fore.CYAN}│")
        print(f"│ {Fore.YELLOW}2. Scan vulnerabilities for all devices       {Fore.CYAN}│")
        print(f"│ {Fore.YELLOW}3. Target specific device                     {Fore.CYAN}│")
        print(f"│ {Fore.YELLOW}4. Advanced exploitation toolkit              {Fore.CYAN}│")
        print(f"│ {Fore.YELLOW}5. Exit                                      {Fore.CYAN}│")
        print(f"└───────────────────────────────────────────────┘{Style.RESET_ALL}")
        return input(f"{Fore.GREEN}[>] Select option: ")
    
    def display_devices(self):
        print(f"\n{Fore.CYAN}┌───────────────[ DISCOVERED DEVICES ]───────────────┐")
        for i, device in enumerate(self.devices, 1):
            status = f"{Fore.RED}VULNERABLE" if 'vulnerabilities' in device else f"{Fore.GREEN}SECURE"
            print(f"│ {i}. {device['name'][:20]:<20} {device['mac']} │")
            print(f"│   ├─ Type: {device['type']:<8} Vendor: {device['vendor'][:15]:<15} │")
            if 'vulnerabilities' in device:
                print(f"│   └─ Status: {status}{Style.RESET_ALL} ({len(device['vulnerabilities']} vulns) │")
            else:
                print(f"│   └─ Status: {status}{Style.RESET_ALL} {'':<14}│")
        print(f"└────────────────────────────────────────────────────┘")
    
    def check_vulnerabilities(self):
        vuln_db = {
            "BlueBorne": {
                "check": lambda d: "4." in d.get('bt_version', "") or "3." in d.get('bt_version', ""),
                "severity": "CRITICAL",
                "status": "OPEN",
                "exploit": "RCE"
            },
            "KNOB Attack": {
                "check": lambda d: "Secure Connections" not in d.get('features', ""),
                "severity": "HIGH",
                "status": "PATCHED",
                "exploit": "Encryption Downgrade"
            },
            "SweynTooth": {
                "check": lambda d: "TI" in d.get('vendor', "") and "BLE" in d['type'],
                "severity": "HIGH",
                "status": "OPEN",
                "exploit": "BLE Crash"
            },
            "BIAS Attack": {
                "check": lambda d: "Secure Connections" not in d.get('features', "") and "Classic" in d['type'],
                "severity": "MEDIUM",
                "status": "PARTIAL",
                "exploit": "Authentication Bypass"
            }
        }
        
        print(f"\n{Fore.RED}[*] Starting vulnerability assessment...")
        for device in self.devices:
            device['info'] = self.run_cmd(f"hcitool info {device['mac']}")
            device['services'] = self.run_cmd(f"sdptool browse {device['mac']}")
            device['bt_version'] = re.search(r"LMP Version: ([\d.]+)", device['info']).group(1) if re.search(r"LMP Version: ([\d.]+)", device['info']) else "Unknown"
            device['features'] = self.run_cmd(f"hcitool features {device['mac']}")
            
            vulnerabilities = []
            for name, data in vuln_db.items():
                if data['check'](device):
                    vulnerabilities.append({
                        "name": name,
                        "severity": data['severity'],
                        "status": data['status'],
                        "exploit": data['exploit']
                    })
            
            if vulnerabilities:
                device['vulnerabilities'] = vulnerabilities
                self.vulnerable_devices.append(device)
        
        print(f"{Fore.GREEN}[+] Vulnerability scan completed!")
        self.display_results()
    
    def display_results(self):
        print(f"\n{Fore.CYAN}┌────────────────────[ VULNERABILITY REPORT ]────────────────────┐")
        for device in self.vulnerable_devices:
            print(f"│ {Fore.YELLOW}{device['name']} ({device['mac']})")
            print(f"│ {Fore.CYAN}├─ Vendor: {device['vendor']} | BT: {device['bt_version']} | Type: {device['type']}")
            
            for vuln in device['vulnerabilities']:
                status_color = Fore.RED if vuln['status'] == "OPEN" else Fore.YELLOW if vuln['status'] == "PARTIAL" else Fore.GREEN
                print(f"│ {Fore.CYAN}├─ {vuln['name']}")
                print(f"│   ├─ Severity: {Fore.RED if vuln['severity'] == 'CRITICAL' else Fore.YELLOW}{vuln['severity']}{Style.RESET_ALL}")
                print(f"│   ├─ Status:   {status_color}{vuln['status']}{Style.RESET_ALL}")
                print(f"│   └─ Exploit:  {vuln['exploit']}")
            
            print(f"│ {Fore.CYAN}├───────────────────────────────────────────────────│")
        print(f"└────────────────────────────────────────────────────────────────┘")
    
    def target_device(self):
        self.display_devices()
        try:
            choice = int(input(f"{Fore.GREEN}[>] Select device number: "))
            if 1 <= choice <= len(self.devices):
                self.current_target = self.devices[choice-1]
                print(f"{Fore.GREEN}[+] Target set: {self.current_target['name']} ({self.current_target['mac']})")
                self.advanced_tests_menu()
            else:
                print(f"{Fore.RED}[!] Invalid selection")
        except:
            print(f"{Fore.RED}[!] Invalid input")
    
    def advanced_tests_menu(self):
        while True:
            print(f"\n{Fore.CYAN}┌──────────[ ADVANCED TOOLS: {self.current_target['mac']} ]──────────┐")
            print(f"│ {Fore.YELLOW}1. Run BlueBorne vulnerability test          {Fore.CYAN}│")
            print(f"│ {Fore.YELLOW}2. Test KNOB attack feasibility             {Fore.CYAN}│")
            print(f"│ {Fore.YELLOW}3. BLE security assessment                 {Fore.CYAN}│")
            print(f"│ {Fore.YELLOW}4. Service enumeration                     {Fore.CYAN}│")
            print(f"│ {Fore.YELLOW}5. Return to main menu                     {Fore.CYAN}│")
            print(f"└───────────────────────────────────────────────┘{Style.RESET_ALL}")
            
            choice = input(f"{Fore.GREEN}[>] Select test: ")
            
            if choice == '1':
                self.test_blueborne()
            elif choice == '2':
                self.test_knob()
            elif choice == '3':
                self.test_ble_security()
            elif choice == '4':
                self.enumerate_services()
            elif choice == '5':
                break
            else:
                print(f"{Fore.RED}[!] Invalid selection")
    
    def test_blueborne(self):
        print(f"\n{Fore.RED}[*] Running BlueBorne vulnerability test...")
        print(f"{Fore.YELLOW}[*] Checking LMP version: {self.current_target['bt_version']}")
        
        if float(self.current_target['bt_version']) < 4.2:
            print(f"{Fore.RED}[!] VULNERABLE: Device may be susceptible to BlueBorne attacks (CVE-2017-1000251)")
            print(f"{Fore.YELLOW}[*] Testing RCE potential...")
            output = self.run_cmd(f"l2ping -i hci0 -s 600 -f {self.current_target['mac']}")
            if "0 received" not in output:
                print(f"{Fore.RED}[!] Confirmed: Device responds to oversized packets")
            else:
                print(f"{Fore.GREEN}[+] Device seems resistant to packet flooding")
        else:
            print(f"{Fore.GREEN}[+] Device likely patched against BlueBorne attacks")
    
    def test_knob(self):
        print(f"\n{Fore.RED}[*] Testing KNOB attack vulnerability...")
        print(f"{Fore.YELLOW}[*] Checking Secure Connections support...")
        
        if "Secure Connections" in self.current_target['features']:
            print(f"{Fore.GREEN}[+] Secure Connections enabled - Protected against KNOB")
        else:
            print(f"{Fore.RED}[!] VULNERABLE: Secure Connections not supported (CVE-2019-9506)")
            print(f"{Fore.YELLOW}[*] Attempting encryption downgrade...")
            output = self.run_cmd(f"btgatt-client -d {self.current_target['mac']}")
            if "encryption failed" in output:
                print(f"{Fore.RED}[!] Confirmed: Encryption downgrade successful")
            else:
                print(f"{Fore.YELLOW}[-] Could not verify exploit - Requires physical testing")
    
    def test_ble_security(self):
        print(f"\n{Fore.RED}[*] Starting BLE security assessment...")
        print(f"{Fore.YELLOW}[*] Scanning for GATT services...")
        services = self.run_cmd(f"gatttool -b {self.current_target['mac']} --primary")
        
        vulnerable = False
        for line in services.splitlines():
            if "handle" in line:
                print(f"{Fore.CYAN}[+] Found service: {line}")
                if "1800" in line or "1801" in line:  # Generic Access services
                    print(f"{Fore.YELLOW}   └─ Potential attack surface: Device information exposure")
                if "1812" in line:  # Human Interface Device
                    print(f"{Fore.RED}   └─ WARNING: HID service may allow input injection")
                    vulnerable = True
        
        if vulnerable:
            print(f"{Fore.RED}[!] Device has potentially vulnerable BLE services")
        else:
            print(f"{Fore.GREEN}[+] No critical BLE vulnerabilities detected")
    
    def enumerate_services(self):
        print(f"\n{Fore.RED}[*] Enumerating Bluetooth services...")
        services = self.run_cmd(f"sdptool browse {self.current_target['mac']}")
        service_count = 0
        
        for line in services.splitlines():
            if "Service Name" in line:
                service = line.split(":")[1].strip()
                service_count += 1
                print(f"{Fore.CYAN}[+] Service: {service}")
                
                if "OBEX" in service:
                    print(f"{Fore.YELLOW}   └─ WARNING: OBEX service may allow file transfer exploits")
                if "A2DP" in service:
                    print(f"{Fore.YELLOW}   └─ WARNING: Audio streaming vulnerable to eavesdropping")
                if "HSP" in service or "HFP" in service:
                    print(f"{Fore.RED}   └─ CRITICAL: Headset profile vulnerable to audio hijacking")
        
        print(f"{Fore.GREEN}[+] Found {service_count} services on target device")
    
    def generate_exploit_script(self):
        if not self.vulnerable_devices:
            print(f"{Fore.RED}[!] No vulnerable devices found")
            return
        
        script = """#!/bin/bash
# Bluetooth Exploitation Toolkit
# Generated: {date}
# Use only on devices you own!

echo -e "\\033[32m[*] Starting Bluetooth Exploitation Toolkit\\033[0m"
        """.format(date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        
        for device in self.vulnerable_devices:
            script += f"""
echo -e "\\n\\033[34m[+] Testing device: {device['name']} ({device['mac']})\\033[0m"
            """
            
            for vuln in device['vulnerabilities']:
                if vuln['status'] == "OPEN":
                    if "BlueBorne" in vuln['name']:
                        script += f"""
echo -e "\\033[33m[*] Attempting BlueBorne exploit\\033[0m"
l2ping -i hci0 -s 600 -f {device['mac']} &
echo -e "\\033[31m[!] If device crashes, it's vulnerable to CVE-2017-1000251\\033[0m"
                        """
                    elif "KNOB" in vuln['name']:
                        script += f"""
echo -e "\\033[33m[*] Attempting KNOB attack\\033[0m"
btgatt-client -d {device['mac']} -t random
echo -e "\\033[31m[!] Check if encryption strength is reduced\\033[0m"
                        """
        
        script += """
echo -e "\\n\\033[32m[+] Exploitation tests completed\\033[0m"
echo "Remember: Ethical hacking only on your own devices!"
        """
        
        filename = f"bluetooth_exploit_{datetime.now().strftime('%H%M%S')}.sh"
        with open(filename, "w") as f:
            f.write(script)
        os.chmod(filename, 0o755)
        
        print(f"{Fore.GREEN}[+] Exploit script generated: {filename}")
        print(f"{Fore.YELLOW}[*] Run with: sudo bash {filename}")
    
    def run(self):
        self.show_banner()
        self.scan_devices()
        
        while True:
            choice = self.show_menu()
            
            if choice == '1':
                self.display_devices()
            elif choice == '2':
                self.check_vulnerabilities()
            elif choice == '3':
                self.target_device()
            elif choice == '4':
                self.generate_exploit_script()
            elif choice == '5':
                print(f"{Fore.GREEN}\n[+] Thanks for using the Bluetooth Pentest Tool!")
                print(f"{Fore.CYAN}[*] Developed by Anas Erami - Security Researcher")
                break
            else:
                print(f"{Fore.RED}[!] Invalid option")

if __name__ == "__main__":
    if os.geteuid() != 0:
        print(f"{Fore.RED}[!] Must run as root: sudo {sys.argv[0]}")
        sys.exit(1)
    
    tool = BluetoothPentestTool()
    tool.run()